.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Class::Moose::Config 3pm"
.TH Test::Class::Moose::Config 3pm "2014-04-16" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Class::Moose::Config \- Configuration information for Test::Class::Moose
.SH "VERSION"
.IX Header "VERSION"
version 0.54
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& my $tc_config = Test::Class::Moose::Config\->new({
\&     show_timing => 1,
\&     builder     => Test::Builder\->new,
\&     statistics  => 1,
\&     randomize   => 0,
\& });
\& my $test_suite = Test::Class::Moose\->new($tc_config);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For internal use only (maybe I'll expose it later). Not guaranteed to be
stable.
.PP
This class defines many of the attributes for Test::Class::Moose. They're
kept here to minimize namespace pollution in Test::Class::Moose.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.ie n .SS "* ""show_timing"""
.el .SS "* \f(CWshow_timing\fP"
.IX Subsection "* show_timing"
Boolean. Will display verbose information on the amount of time it takes each
test class/test method to run.
.ie n .SS "* ""statistics"""
.el .SS "* \f(CWstatistics\fP"
.IX Subsection "* statistics"
Boolean. Will display number of classes, test methods and tests run.
.ie n .SS "* ""use_environment"""
.el .SS "* \f(CWuse_environment\fP"
.IX Subsection "* use_environment"
Boolean.  Sets show_timing and statistics to true if your test harness is running verbosely, false otherwise.
.ie n .SS """test_classes"""
.el .SS "\f(CWtest_classes\fP"
.IX Subsection "test_classes"
Takes a class name or an array reference of class names. If it is present, the
\&\f(CW\*(C`test_classes\*(C'\fR method will only return these classes. This is very useful if
you wish to run an individual class as a test:
.PP
.Vb 3
\&    Test::Class::Moose\->new(
\&        test_classes => $ENV{TEST_CLASS}, # ignored if undef
\&    )\->runtests;
.Ve
.ie n .SS """include_tags"""
.el .SS "\f(CWinclude_tags\fP"
.IX Subsection "include_tags"
Array ref of strings matching method tags (a single string is also ok). If
present, only test methods whose tags match \f(CW\*(C`include_tags\*(C'\fR or whose tags
don't match \f(CW\*(C`exclude_tags\*(C'\fR will be included. \fBHowever\fR, they must still
start with \f(CW\*(C`test_\*(C'\fR.
.PP
For example:
.PP
.Vb 3
\& my $test_suite = Test::Class::Moose\->new({
\&     include_tags => [qw/api database/],
\& });
.Ve
.PP
The above constructor will only run tests tagged with \f(CW\*(C`api\*(C'\fR or \f(CW\*(C`database\*(C'\fR.
.ie n .SS """exclude_tags"""
.el .SS "\f(CWexclude_tags\fP"
.IX Subsection "exclude_tags"
The same as \f(CW\*(C`include_tags\*(C'\fR, but will exclude the tests rather than include
them. For example, if your network is down:
.PP
.Vb 3
\& my $test_suite = Test::Class::Moose\->new({
\&     exclude_tags => [ \*(Aqnetwork\*(Aq ],
\& });
\&
\& # or
\& my $test_suite = Test::Class::Moose\->new({
\&     exclude_tags => \*(Aqnetwork\*(Aq,
\& });
.Ve
.ie n .SS """builder"""
.el .SS "\f(CWbuilder\fP"
.IX Subsection "builder"
Usually defaults to \f(CW\*(C`Test::Builder\->new\*(C'\fR, but you could substitute your
own if it conforms to the interface.
.ie n .SS """randomize"""
.el .SS "\f(CWrandomize\fP"
.IX Subsection "randomize"
Boolean. Will run tests in a random order.
.ie n .SS """jobs"""
.el .SS "\f(CWjobs\fP"
.IX Subsection "jobs"
\&\fB\s-1EXPERIMENTAL\s0\fR: Returns the number of jobs running for the test suite.
Default is 1.
.PP
Only used by \f(CW\*(C`Test::Class::Moose::Role::Parallel\*(C'\fR.
.ie n .SS """running_in_parallel"""
.el .SS "\f(CWrunning_in_parallel\fP"
.IX Subsection "running_in_parallel"
\&\fB\s-1EXPERIMENTAL\s0\fR: Returns true if it appears that we are running in parallel.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """args"""
.el .SS "\f(CWargs\fP"
.IX Subsection "args"
.Vb 1
\& my $tests = Some::Test::Class\->new($test_suite\->test_configuration\->args);
.Ve
.PP
Returns a hash reference of the args used to build the configuration. Used in
testing. You probably won't need it.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-test\-class\-moose at rt.cpan.org\*(C'\fR,
or through the web interface at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test\-Class\-Moose <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Class-Moose>.  I will be
notified, and then you'll automatically be notified of progress on your bug as
I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Test::Class::Moose
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker (report bugs here)
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test\-Class\-Moose <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test-Class-Moose>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/Test\-Class\-Moose <http://annocpan.org/dist/Test-Class-Moose>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/Test\-Class\-Moose <http://cpanratings.perl.org/d/Test-Class-Moose>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/Test\-Class\-Moose/ <http://search.cpan.org/dist/Test-Class-Moose/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "AUTHOR"
.IX Header "AUTHOR"
Curtis \*(L"Ovid\*(R" Poe <ovid@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Curtis \*(L"Ovid\*(R" Poe.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
