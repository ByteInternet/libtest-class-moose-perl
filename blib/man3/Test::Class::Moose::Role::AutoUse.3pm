.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Class::Moose::Role::AutoUse 3pm"
.TH Test::Class::Moose::Role::AutoUse 3pm "2014-04-16" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Class::Moose::Role::AutoUse \- Automatically load the classes you're testing
.SH "VERSION"
.IX Header "VERSION"
version 0.54
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& package TestsFor::Some::Class;
\& use Test::Class::Moose;
\& with \*(AqTest::Class::Moose::Role::AutoUse\*(Aq;
\&
\& sub test_constructor {
\&     my $test  = shift;
\&
\&     my $class = $test\->class_name;             # Some::Class
\&     can_ok $class, \*(Aqnew\*(Aq;                      # Some::Class is already loaded
\&     isa_ok my $object = $class\->new, $class;   # and can be used as normal
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This role allows you to automatically \f(CW\*(C`use\*(C'\fR the classes your test class is
testing, providing the name of the class via the \f(CW\*(C`class_name\*(C'\fR attribute.
Thus, you don't need to hardcode your class names.
.SH "PROVIDES"
.IX Header "PROVIDES"
.ie n .SS """class_name"""
.el .SS "\f(CWclass_name\fP"
.IX Subsection "class_name"
Returns the name of the class you're testing. As a side-effect, the first time
it's called it will attempt to \f(CW\*(C`use\*(C'\fR the class being tested.
.ie n .SS """get_class_name_to_use"""
.el .SS "\f(CWget_class_name_to_use\fP"
.IX Subsection "get_class_name_to_use"
This method strips the leading section of the package name, up to and
including the first \f(CW\*(C`::\*(C'\fR, and returns the rest of the name as the name of the
class being tested. For example, if your test class is named
\&\f(CW\*(C`Tests::Some::Person\*(C'\fR, the name \f(CW\*(C`Some::Person\*(C'\fR is returned as the name of
the class to use and test. If your test class is named
\&\f(CW\*(C`IHateTestingThis::Person\*(C'\fR, then \f(CW\*(C`Person\*(C'\fR is the name of the class to be
used and tested.
.PP
If you don't like how the name is calculated, you can override this method in
your code.
.PP
Warning: Don't use Test:: as a prefix. There are already plenty of modules
in that namespace and you could accidentally cause a collision.
.SH "RATIONALE"
.IX Header "RATIONALE"
The example from our synopsis looks like this:
.PP
.Vb 3
\& package TestsFor::Some::Class;
\& use Test::Class::Moose;
\& with \*(AqTest::Class::Moose::Role::AutoUse\*(Aq;
\&
\& sub test_constructor {
\&     my $test  = shift;
\&
\&     my $class = $test\->class_name;             # Some::Class
\&     can_ok $class, \*(Aqnew\*(Aq;                      # Some::Class is already loaded
\&     isa_ok my $object = $class\->new, $class;   # and can be used as normal
\& }
.Ve
.PP
Without this role, it would often look like this:
.PP
.Vb 3
\& package TestsFor::Some::Class;
\& use Test::Class::Moose;
\& use Some::Class;
\&
\& sub test_constructor {
\&     my $test  = shift;
\&
\&     can_ok \*(AqSome::Class\*(Aq, \*(Aqnew\*(Aq;
\&     isa_ok my $object = \*(AqSome::Class\*(Aq\->new, \*(AqSome::Class\*(Aq;
\& }
.Ve
.PP
That's \s-1OK\s0, but there are a couple of issues here.
.PP
First, if you need to rename your class, you must change this name repeatedly.
With Test::Class::Moose::Role::AutoUse, you only rename the test class name
to correspond to the new class name and you're done.
.PP
The first problem is not very serious, but the second problem is. Let's say
you have a \f(CW\*(C`Person\*(C'\fR class and then you create a \f(CW\*(C`Person::Employee\*(C'\fR subclass.
Your test subclass might look like this:
.PP
.Vb 1
\& package TestsFor::Person::Employee;
\&
\& use Test::Class::Moose extends => "TestsFor::Person";
\&
\& # insert tests here
.Ve
.PP
Object-oriented tests \fIinherit\fR their parent class tests. Thus,
\&\f(CW\*(C`TestsFor::Person::Employee\*(C'\fR will inherit the
\&\f(CW\*(C`TestsFor::Person\-\*(C'\fR\fItest_constructor()\fR> method. Except as you can see in our
example above, we've \fBhardcoded\fR the class name, meaning that we won't be
testing our code appropriately. The code using the
Test::Class::Moose::Role::AutoUse role doesn't hardcode the classname (at
least, it shouldn't), so when we call the inherited
\&\f(CW\*(C`TestsFor::Person::Employee\-\*(C'\fR\fItest_constructor()\fR> method, it constructs a
\&\f(CW\*(C`TestsFor::Person::Employee\*(C'\fR object, not a \f(CW\*(C`TestsFor::Person\*(C'\fR object.
.PP
Some might argue that this is a strawman and we should have done this:
.PP
.Vb 3
\& package TestsFor::Some::Class;
\& use Test::Class::Moose;
\& use Some::Class;
\&
\& sub class_name { \*(AqSome::Class\*(Aq }
\&
\& sub test_constructor {
\&     my $test  = shift;
\&
\&     my $class = $test\->class_name;             # Some::Class
\&     can_ok $class, \*(Aqnew\*(Aq;                      # Some::Class is already loaded
\&     isa_ok my $object = $class\->new, $class;   # and can be used as normal
\& }
.Ve
.PP
Yes, that's correct. We should have done this, except that now it's almost
identical to the AutoUse code, except that the first time you forget to \f(CW\*(C`use\*(C'\fR
the class in question, you'll be unhappy. Why not automate this?
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-test\-class\-moose at rt.cpan.org\*(C'\fR,
or through the web interface at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test\-Class\-Moose <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Class-Moose>.  I will be
notified, and then you'll automatically be notified of progress on your bug as
I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Test::Class::Moose
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker (report bugs here)
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test\-Class\-Moose <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test-Class-Moose>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/Test\-Class\-Moose <http://annocpan.org/dist/Test-Class-Moose>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/Test\-Class\-Moose <http://cpanratings.perl.org/d/Test-Class-Moose>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/Test\-Class\-Moose/ <http://search.cpan.org/dist/Test-Class-Moose/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Curtis \*(L"Ovid\*(R" Poe <ovid@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Curtis \*(L"Ovid\*(R" Poe.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
