.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Class::Moose::Report 3pm"
.TH Test::Class::Moose::Report 3pm "2014-04-16" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Class::Moose::Report \- Test information for Test::Class::Moose
.SH "VERSION"
.IX Header "VERSION"
version 0.54
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& my $report = Test::Class::Moose\->new\->runtests\->test_report;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When working with larger test suites, it's useful to have full reporting
information avaiable about the test suite. The reporting features of
Test::Class::Moose allow you to report on the number of test classes and
methods run (and number of tests), along with timing information to help you
track down which tests are running slowly. You can even run tests on your
report information:
.PP
.Vb 5
\&    #!/usr/bin/env perl
\&    use lib \*(Aqlib\*(Aq;
\&    use Test::Most;
\&    use Test::Class::Moose::Load qw(t/lib);
\&    my $test_suite = Test::Class::Moose\->new;
\&
\&    subtest \*(Aqrun the test suite\*(Aq => sub {
\&        $test_suite\->runtests;
\&    };
\&    my $report = $test_suite\->test_report;
\&    my $duration = $report\->time\->duration;
\&    diag "Test suite run time: $duration";
\&
\&    foreach my $class ( $report\->all_test_classes ) {
\&        my $class_name = $class\->name;
\&        ok !$class\->is_skipped, "$class_name was not skipped";
\&
\&        subtest "$class_name methods" => sub {
\&            foreach my $method ( $class\->all_test_methods ) {
\&                my $method_name = $method\->name;
\&                ok !$method\->is_skipped, "$method_name was not skipped";
\&                cmp_ok $method\->num_tests, \*(Aq>\*(Aq, 0,
\&                  \*(Aq... and some tests should have been run\*(Aq;
\&                diag "Run time for $method_name: ".$method\->time\->duration;
\&            }
\&        };
\&        my $time   = $class\->time;
\&        diag "Run time for $class_name: ".$class\->time\->duration;
\&
\&        my $real   = $time\->real;
\&        my $user   = $time\->user;
\&        my $system = $time\->system;
\&        # do with these as you will
\&    }
\&    diag "Number of test classes: " . $report\->num_test_classes;
\&    diag "Number of test methods: " . $report\->num_test_methods;
\&    diag "Number of tests:        " . $report\->num_tests;
\&
\&    done_testing;
.Ve
.PP
Reporting is currently in alpha. The interface is not guaranteed to be stable.
.SS "The Report"
.IX Subsection "The Report"
.Vb 1
\& my $report = Test::Class::Moose\->new\->runtests\->test_report;
.Ve
.PP
Or:
.PP
.Vb 3
\& my $test_suite = Test::Class::Moose\->new;
\& $test_suite\->runtests;
\& my $report = $test_suite\->test_report;
.Ve
.PP
After the test suite is run, you can call the \f(CW\*(C`test_report\*(C'\fR method to get the
report. The test report is a Test::Class::Moose::Report object. This object
provides the following methods:
.PP
\fI\f(CI\*(C`test_classes\*(C'\fI\fR
.IX Subsection "test_classes"
.PP
Returns an array reference of Test::Class::Moose::Report::Class instances.
.PP
\fI\f(CI\*(C`all_test_classes\*(C'\fI\fR
.IX Subsection "all_test_classes"
.PP
Returns an array of Test::Class::Moose::Report::Class instances.
.PP
\fI\f(CI\*(C`num_test_classes\*(C'\fI\fR
.IX Subsection "num_test_classes"
.PP
Integer. The number of test classes run.
.PP
\fI\f(CI\*(C`num_test_methods\*(C'\fI\fR
.IX Subsection "num_test_methods"
.PP
Integer. The number of test methods run.
.PP
\fI\f(CI\*(C`num_tests_run\*(C'\fI\fR
.IX Subsection "num_tests_run"
.PP
Integer. The number of tests run.
.PP
\fI\f(CI\*(C`time\*(C'\fI\fR
.IX Subsection "time"
.PP
Returns a Test::Class::Moose::Report::Time object. This object
represents the duration of the entire test suite.
.SS "Test Report for Classes"
.IX Subsection "Test Report for Classes"
Each Test::Class::Moose::Report::Class instance provides the following
methods:
.PP
\fI\f(CI\*(C`test_methods\*(C'\fI\fR
.IX Subsection "test_methods"
.PP
Returns an array reference of Test::Class::Moose::Report::Method
objects.
.PP
\fI\f(CI\*(C`all_test_methods\*(C'\fI\fR
.IX Subsection "all_test_methods"
.PP
Returns an array of Test::Class::Moose::Report::Method objects.
.PP
\fI\f(CI\*(C`error\*(C'\fI\fR
.IX Subsection "error"
.PP
If this class could not be run, returns a string explaining the error.
.PP
\fI\f(CI\*(C`has_error\*(C'\fI\fR
.IX Subsection "has_error"
.PP
Returns a boolean indicating whether or not the class has an error.
.PP
\fI\f(CI\*(C`name\*(C'\fI\fR
.IX Subsection "name"
.PP
The name of the test class.
.PP
\fI\f(CI\*(C`notes\*(C'\fI\fR
.IX Subsection "notes"
.PP
A hashref. The end user may use this to store anything desired.
.PP
\fI\f(CI\*(C`skipped\*(C'\fI\fR
.IX Subsection "skipped"
.PP
If the class or method is skipped, this will return the skip message.
.PP
\fI\f(CI\*(C`is_skipped\*(C'\fI\fR
.IX Subsection "is_skipped"
.PP
Returns true if the class or method is skipped.
.PP
\fI\f(CI\*(C`time\*(C'\fI\fR
.IX Subsection "time"
.PP
Returns a Test::Class::Moose::Report::Time object. This object
represents the duration of this class.
.SS "Test Report for Methods"
.IX Subsection "Test Report for Methods"
Each Test::Class::Moose::Report::Method instance provides the following
methods:
.PP
\fI\f(CI\*(C`name\*(C'\fI\fR
.IX Subsection "name"
.PP
The \*(L"name\*(R" of the test method.
.PP
\fI\f(CI\*(C`notes\*(C'\fI\fR
.IX Subsection "notes"
.PP
A hashref. The end user may use this to store anything desired.
.PP
\fI\f(CI\*(C`skipped\*(C'\fI\fR
.IX Subsection "skipped"
.PP
If the class or method is skipped, this will return the skip message.
.PP
\fI\f(CI\*(C`is_skipped\*(C'\fI\fR
.IX Subsection "is_skipped"
.PP
Returns true if the class or method is skipped.
.PP
\fI\f(CI\*(C`time\*(C'\fI\fR
.IX Subsection "time"
.PP
Returns a Test::Class::Moose::Report::Time object. This object
represents the duration of this class or method.
.SS "Test Report for Time"
.IX Subsection "Test Report for Time"
Each Test::Class::Moose::Report::Time instance has the following methods:
.PP
\fI\f(CI\*(C`real\*(C'\fI\fR
.IX Subsection "real"
.PP
.Vb 1
\&    my $real = $time\->real;
.Ve
.PP
Returns the \*(L"real\*(R" amount of time the class or method took to run.
.PP
\fI\f(CI\*(C`user\*(C'\fI\fR
.IX Subsection "user"
.PP
.Vb 1
\&    my $user = $time\->user;
.Ve
.PP
Returns the \*(L"user\*(R" amount of time the class or method took to run.
.PP
\fI\f(CI\*(C`system\*(C'\fI\fR
.IX Subsection "system"
.PP
.Vb 1
\&    my $system = $time\->system;
.Ve
.PP
Returns the \*(L"system\*(R" amount of time the class or method took to run.
.PP
\fI\f(CI\*(C`duration\*(C'\fI\fR
.IX Subsection "duration"
.PP
Returns the returns a human-readable representation of the time this class or
method took to run. Something like:
.PP
.Vb 1
\&  0.00177908 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
.Ve
.SH "TRUSTED METHODS"
.IX Header "TRUSTED METHODS"
The following Test::Class::Moose::Report methods are for internal use only
and are called by Test::Class::Moose.  They are included here for those who
might want to hack on Test::Class::Moose.
.ie n .SS """_inc_test_methods"""
.el .SS "\f(CW_inc_test_methods\fP"
.IX Subsection "_inc_test_methods"
.Vb 2
\&    $statistics\->_inc_test_methods;        # increments by 1
\&    $statistics\->_inc_test_methods($x);    # increments by $x
.Ve
.ie n .SS """_inc_tests"""
.el .SS "\f(CW_inc_tests\fP"
.IX Subsection "_inc_tests"
.Vb 2
\&    $statistics\->_inc_tests;        # increments by 1
\&    $statistics\->_inc_tests($x);    # increments by $x
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-test\-class\-moose at rt.cpan.org\*(C'\fR,
or through the web interface at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test\-Class\-Moose <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Class-Moose>.  I will be
notified, and then you'll automatically be notified of progress on your bug as
I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Test::Class::Moose
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker (report bugs here)
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test\-Class\-Moose <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Test-Class-Moose>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/Test\-Class\-Moose <http://annocpan.org/dist/Test-Class-Moose>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/Test\-Class\-Moose <http://cpanratings.perl.org/d/Test-Class-Moose>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/Test\-Class\-Moose/ <http://search.cpan.org/dist/Test-Class-Moose/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Curtis \*(L"Ovid\*(R" Poe <ovid@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Curtis \*(L"Ovid\*(R" Poe.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
