.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Class::Moose::AttributeRegistry 3pm"
.TH Test::Class::Moose::AttributeRegistry 3pm "2014-03-18" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Class::Moose::AttributeRegistry \- Global registry of tags by class and method.
.SH "VERSION"
.IX Header "VERSION"
version 0.54
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Test::Class::Moose::AttributeRegistry;
\&
\& my @tags = Test::Class::Moose::AttributeRegistry\->tags;
\& print Test::Class::Moose::AttributeRegistry\->method_has_tag( \*(AqTestsFor::FooBar\*(Aq, \*(Aqtest_baz\*(Aq, \*(Aqnetwork\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class permits addition and querying of the tags and plans defined on
methods via attributes. It's been gleefully stolen from
Attribute::Method::Tags and is for internal use only. Don't rely on this
code.
.SH "METHODS"
.IX Header "METHODS"
All the following are class methods, as the attribute registry is shared
globally. Note that all parameters for any of the methods below are required.
.ie n .IP "add_plan( $class, $method, plan )" 4
.el .IP "add_plan( \f(CW$class\fR, \f(CW$method\fR, plan )" 4
.IX Item "add_plan( $class, $method, plan )"
Add a numeric (or undef) plan to a method.
.ie n .IP "get_plan( $class, $method )" 4
.el .IP "get_plan( \f(CW$class\fR, \f(CW$method\fR )" 4
.IX Item "get_plan( $class, $method )"
Returns the numeric (or undef) plan for a method if that was set via the
\&\f(CW\*(C`Test\*(C'\fR or \f(CW\*(C`Tests\*(C'\fR attributes.
.ie n .IP "has_test_attribute( $class, $method )" 4
.el .IP "has_test_attribute( \f(CW$class\fR, \f(CW$method\fR )" 4
.IX Item "has_test_attribute( $class, $method )"
Returns true if either \f(CW\*(C`Test\*(C'\fR or \f(CW\*(C`Tests\*(C'\fR was declared for a method. Used to
identify something as a test method even if the method name doesn't begin with
\&\f(CW\*(C`test_\*(C'\fR.
.ie n .IP "add_tags( $class, $method, $tags_ref )" 4
.el .IP "add_tags( \f(CW$class\fR, \f(CW$method\fR, \f(CW$tags_ref\fR )" 4
.IX Item "add_tags( $class, $method, $tags_ref )"
Adds the given list of tags (as an array-ref) for the specified class/method
combination.  An exception will be raised if either the tags are
non-alphanumeric or the method is one that has already had tags registered
for it.
.IP "tags" 4
.IX Item "tags"
Find all tags defined for all methods.  Returns a sorted list of tags.
.ie n .IP "method_has_tag( $class, $method, $tag )" 4
.el .IP "method_has_tag( \f(CW$class\fR, \f(CW$method\fR, \f(CW$tag\fR )" 4
.IX Item "method_has_tag( $class, $method, $tag )"
Returns a boolean (0|1), indicating whether the given method in the given class
has the specified tag.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Attribute::Method::Tags" 4
.IX Item "Attribute::Method::Tags"
Attribute-based interface for adding tags to methods. Your author \*(L"liberated\*(R"
this code from Attribute::Method::Tags::Registry (with a tip 'o the
keyboard to Mark Morgan for his work on this).
.SH "AUTHOR"
.IX Header "AUTHOR"
Curtis \*(L"Ovid\*(R" Poe <ovid@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Curtis \*(L"Ovid\*(R" Poe.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
